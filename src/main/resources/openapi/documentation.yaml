openapi: "3.1.0"
info:
  title: "backend API"
  description: "backend API"
  version: "1.0.0"
servers:
  - url: "http://localhost:8080"
paths:
  /api/tags:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Tag"
    post:
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tag"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                type: "object"
  /api/tags/{id}:
    delete:
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "Invalid id format"
        "204":
          description: "No Content"
          content:
            '*/*':
              schema:
                type: "object"
    get:
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "Invalid id format"
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "null"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Tag"
    put:
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tag"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "Invalid id format"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/groups:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Group"
    post:
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Group"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                type: "object"
  /api/groups/{id}:
    delete:
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "Invalid id format"
        "204":
          description: "No Content"
          content:
            '*/*':
              schema:
                type: "object"
    get:
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "Invalid id format"
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "null"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Group"
    put:
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Group"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "Invalid id format"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/bookmarks:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Bookmark"
    post:
      description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Bookmark"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                type: "object"
  /api/bookmarks/{id}:
    delete:
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "Invalid id format"
        "204":
          description: "No Content"
          content:
            '*/*':
              schema:
                type: "object"
    get:
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "Invalid id format"
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "null"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Bookmark"
    put:
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Bookmark"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "Invalid id format"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/bookmarks/byGroupId/{id}:
    get:
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "Invalid id format"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Bookmark"
  /api/bookmarks/byTagId/{id}:
    get:
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "Invalid id format"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Bookmark"
components:
  schemas:
    Tag:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
          nullable: true
        name:
          type: "string"
      required:
        - "name"
    Group:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
          nullable: true
        name:
          type: "string"
      required:
        - "name"
    Bookmark:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
          nullable: true
        name:
          type: "string"
        url:
          type: "string"
        groupId:
          type: "integer"
          format: "int32"
          nullable: true
        tagId:
          type: "integer"
          format: "int32"
          nullable: true
      required:
        - "name"
        - "url"